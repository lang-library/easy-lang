# https://fullstack.wiki/syntax/rfc8259/index

elang-text = ws value ws;

begin-array     = ws ("[" / "(") ws;  #; [ left square bracket

begin-vector   = ws ( "$[" / "$(" ) ws;

begin-object    = ws "{" ws;  #; { left curly bracket

end-array       = ws ("]" / ")") ws;  #; ] right square bracket

end-vector      = ws ("]" / ")") ws;  #; ] right square bracket

end-object      = ws "}" ws;  #; } right curly bracket

name-separator  = ws ":" ws;  #; : colon

value-separator = (ws "," ws) / ws;  #; , comma

ws = *(
	%x20 /              #; Space
	%x09 /              #; Horizontal tab
	%x0A /              #; Line feed or New line
	%x0D /              #; Carriage return
    linecomment /       #; single line comment
    comment);           #; multi line comment

linecomment = ( "//" / ";" / "#" ) inslcomment ( %x0A / %x0D );
comment = "/*" inmlcomment "*/";

inslcomment = *( %x01-09 / %x0B / %x0C / %x0E-FFFFFFFF );
inmlcomment = *( %x01-29 / %x2B-FFFFFFFF / ( %x2A ( %x01-2E / %x30-FFFFFFFF ) ) );

#value = false / null / true / object / array / number / string / lisp-symbol / vector / quote / unquote / deref / metadata / as-is;
value = false / null / true / object / array / number / string / lisp-symbol / vector / char / quote / unquote / as-is;

false = %x66.61.6c.73.65;   #; false

null  = %x6e.75.6c.6c;      #; null

true  = %x74.72.75.65;      #; true

object = begin-object [ member *( value-separator member ) ] end-object;

member = member-name name-separator value;

#member-name = string / symbol;
member-name = string / lisp-symbol;

array = begin-array [ value *( value-separator value ) ] end-array;

vector = begin-vector [ value *( value-separator value ) ] end-vector;

#char = "?" %x00-FFFFFFFF;
char = ( "?" %x00-7F ) / ( "?" %x80-FFFFFFFF *( %x80-FFFFFFFF ) );

quote = ("'" / "`" / "$'") value;

unquote =  ( "~@" value ) / ( "~" value );

#deref =  ( "?" value );

#metadata =  ( "^" ws value ws value );

#as-is = "$@" *( "@@" / ( %x00-3F / %x41-FFFFFFFF ) ) "@";
as-is = "@" *( "@@" / ( %x00-3F / %x41-FFFFFFFF ) ) "@";

number = [ minus ] int [ frac ] [ exp ];

decimal-point = %x2E;       #; .

digit = %x30-39;            #; 0-9

digit1-9 = %x31-39;         #; 1-9

hexdig = digit / "A" / "B" / "C" / "D" / "E" / "F";

e = %x65 / %x45;            #; e E

exp = e [ minus / plus ] 1*digit;

frac = decimal-point 1*digit;

int = zero / ( digit1-9 *digit );

minus = %x2D;               #; -

plus = %x2B;                #; +

zero = %x30;                #; 0

#string = string1 / string2 / lisp-symbol;
string = string1;
string1 = double-quotation-mark *char1 double-quotation-mark;
string2 = single-quotation-mark *char2 single-quotation-mark;

double-quotation-mark = %x22;      #; "
single-quotation-mark = %x27;      #; '

escape = %x5C;              #; \

char1 = unescaped1 /
	 escape (
		  %x22 /          #; "    quotation mark  U+0022
		  %x5C /          #; \    reverse solidus U+005C
		  %x2F /          #; /    solidus         U+002F
		  %x62 /          #; b    backspace       U+0008
		  %x66 /          #; f    form feed       U+000C
		  %x6E /          #; n    line feed       U+000A
		  %x72 /          #; r    carriage return U+000D
		  %x74 /          #; t    tab             U+0009
		  %x75 4hexdig    #; uXXXX                U+XXXX
	 );
unescaped1 = %x20-21 / %x23-5B / %x5D-FFFFFFFF;

char2 = unescaped2 /
	 escape (
		  %x27 /          #; '    quotation mark  U+0027
		  %x5C /          #; \    reverse solidus U+005C
		  %x2F /          #; /    solidus         U+002F
		  %x62 /          #; b    backspace       U+0008
		  %x66 /          #; f    form feed       U+000C
		  %x6E /          #; n    line feed       U+000A
		  %x72 /          #; r    carriage return U+000D
		  %x74 /          #; t    tab             U+0009
		  %x75 4hexdig    #; uXXXX                U+XXXX
	 );
unescaped2 = %x20-26 / %x28-5B / %x5D-FFFFFFFF;

lisp-symbol = (lisp-char *( lisp-char / "?" ) ) / ( ( ":" / "\" ) lisp-char *( lisp-char / "?" ) );

#lisp-char = ( "." / "_" / "!" / "%" / "&" / "|" / "-" / "=" / "+" / "*" / "/" / "<" / ">" / %x41-5A / %x61-7A / %x30-39 / %x80-FFFFFFFF );
lisp-char = ( "." / "_" / "!" / "%" / "&" / "|" / "-" / "=" / "+" / "*" / "/" / "^" / "<" / ">" / %x41-5A / %x61-7A / %x30-39 / %x80-FFFFFFFF );
